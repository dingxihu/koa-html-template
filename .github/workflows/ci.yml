name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.18.x'
  POSTGRES_VERSION: '15'

jobs:
  # 核心包测试
  test-core:
    runs-on: ubuntu-latest
    name: Test Core Package
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint core package
      run: npm run lint --workspace=packages/core
    
    - name: Test core package
      run: npm run test --workspace=packages/core
    
    - name: Build core package
      run: npm run build --workspace=packages/core

  # 共享包测试
  test-shared:
    runs-on: ubuntu-latest
    name: Test Shared Package
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint shared package
      run: npm run lint --workspace=packages/shared
    
    - name: Test shared package
      run: npm run test --workspace=packages/shared
    
    - name: Build shared package
      run: npm run build --workspace=packages/shared

  # 服务器包测试（包含数据库）
  test-server:
    runs-on: ubuntu-latest
    name: Test Server Package
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: koa_template_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test database
      run: |
        cd packages/server
        npm run db:setup
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: koa_template_test
        DB_USER: postgres
        DB_PASSWORD: postgres
    
    - name: Lint server package
      run: npm run lint --workspace=packages/server
    
    - name: Test server package
      run: npm run test --workspace=packages/server
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: koa_template_test
        DB_USER: postgres
        DB_PASSWORD: postgres
    
    - name: Build server package
      run: npm run build --workspace=packages/server

  # 客户端包测试
  test-client:
    runs-on: ubuntu-latest
    name: Test Client Package
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint client package
      run: npm run lint --workspace=packages/client
    
    - name: Test client package
      run: npm run test --workspace=packages/client
    
    - name: Build client package
      run: npm run build --workspace=packages/client
    
    - name: Build Storybook
      run: npm run build-storybook --workspace=packages/client

  # 文档包测试
  test-docs:
    runs-on: ubuntu-latest
    name: Test Docs Package
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build docs package
      run: npm run build --workspace=packages/docs

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [test-core, test-shared, test-server, test-client]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: koa_template_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build all packages
      run: npm run build
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: koa_template_integration
        DB_USER: postgres
        DB_PASSWORD: postgres

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint all packages
      run: npm run lint
    
    - name: Check TypeScript
      run: npm run type-check
    
    - name: Check formatting
      run: npm run format:check

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 上传测试覆盖率
  coverage:
    runs-on: ubuntu-latest
    name: Upload Coverage
    needs: [test-core, test-shared, test-server, test-client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 